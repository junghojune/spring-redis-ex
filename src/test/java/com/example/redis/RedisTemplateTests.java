package com.example.redis;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.core.SetOperations;import org.springframework.data.redis.core.StringRedisTemplate;import org.springframework.data.redis.core.ValueOperations;import java.util.concurrent.TimeUnit;@SpringBootTestpublic class RedisTemplateTests {    @Autowired    private StringRedisTemplate stringRedisTemplate;    @Test    public void StringOpsTest() {        // 문자열 조작을 위한 클래스        ValueOperations<String, String> ops =                // RedisTemplate에 설정된 타입을 바탕으로 Redis 문자열 조작                stringRedisTemplate.opsForValue();        ops.set("hello", "world");        System.out.println(ops.get("hello"));        // 집합을 조작하기 위한 클래스        SetOperations<String, String> setOps = stringRedisTemplate.opsForSet();        setOps.add("hobbies", "world");        setOps.add("hobbies", "mama", "papa", "bro");        System.out.println(setOps.size("hobbies"));        stringRedisTemplate.expire("hobbies", 10, TimeUnit.SECONDS);        stringRedisTemplate.delete("hello");    }    @Autowired    private RedisTemplate<String, ItemDto> itemRedisTemplate;    @Test    public void itemRedisTemplateTests() {        ValueOperations<String, ItemDto> ops = itemRedisTemplate.opsForValue();        ops.set("my:keyboard", ItemDto.builder()                .name("mstone")                .price(150000)                .description("too expensive")                .build());        System.out.println(ops.get("my:keyboard"));    }}